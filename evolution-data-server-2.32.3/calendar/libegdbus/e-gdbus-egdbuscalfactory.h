/* File:       e-gdbus-egdbuscalfactory.h
 *
 * GType name: EGdbusCalFactory
 * D-Bus name: org.gnome.evolution.dataserver.calendar.CalFactory
 *
 * Generated by GDBus Binding Tool 0.1. DO NOT EDIT.
 */

#ifndef __E_GDBUS_E_GDBUS_CAL_FACTORY_H__
#define __E_GDBUS_E_GDBUS_CAL_FACTORY_H__

#include <gio/gio.h>

#include "e-gdbus-typemappers.h"
G_BEGIN_DECLS

#define E_GDBUS_TYPE_CAL_FACTORY         (e_gdbus_cal_factory_get_type ())
#define E_GDBUS_CAL_FACTORY(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), E_GDBUS_TYPE_CAL_FACTORY, EGdbusCalFactory))
#define E_GDBUS_IS_CAL_FACTORY(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), E_GDBUS_TYPE_CAL_FACTORY))
#define E_GDBUS_CAL_FACTORY_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE((o), E_GDBUS_TYPE_CAL_FACTORY, EGdbusCalFactoryIface))

/**
 * EGdbusCalFactory:
 *
 * Opaque type representing a proxy or an exported object.
 */
typedef struct _EGdbusCalFactory EGdbusCalFactory; /* Dummy typedef */
/**
 * EGdbusCalFactoryIface:
 * @parent_iface: The parent interface.
 * @handle_get_cal: Handler for the #EGdbusCalFactory::handle-get-cal signal.
 *
 * Virtual table.
 */
typedef struct _EGdbusCalFactoryIface EGdbusCalFactoryIface;

GType e_gdbus_cal_factory_get_type (void) G_GNUC_CONST;

/* ---------------------------------------------------------------------- */

typedef struct _EGdbusCalFactoryProxy EGdbusCalFactoryProxy;
typedef struct _EGdbusCalFactoryProxyClass EGdbusCalFactoryProxyClass;

/**
 * EGdbusCalFactoryProxyPrivate:
 *
 * The #EGdbusCalFactoryProxyPrivate structure contains only private data.
 */
typedef struct _EGdbusCalFactoryProxyPrivate EGdbusCalFactoryProxyPrivate;

/**
 * EGdbusCalFactoryProxy:
 *
 * The #EGdbusCalFactoryProxy structure contains only private data and
 * should only be accessed using the provided API.
 */
struct _EGdbusCalFactoryProxy
{
  GDBusProxy parent_instance;
  EGdbusCalFactoryProxyPrivate *priv;
};

/**
 * EGdbusCalFactoryProxyClass:
 *
 * Class structure for #EGdbusCalFactoryProxy.
 */
struct _EGdbusCalFactoryProxyClass
{
  GDBusProxyClass parent_class;
};

#define E_GDBUS_TYPE_CAL_FACTORY_PROXY (e_gdbus_cal_factory_proxy_get_type ())
GType e_gdbus_cal_factory_proxy_get_type (void) G_GNUC_CONST;

void e_gdbus_cal_factory_proxy_new (GDBusConnection     *connection,
                   GDBusProxyFlags      flags,
                   const gchar         *name,
                   const gchar         *object_path,
                   GCancellable        *cancellable,
                   GAsyncReadyCallback  callback,
                   gpointer             user_data);
EGdbusCalFactory *e_gdbus_cal_factory_proxy_new_finish (GAsyncResult  *res,
                        GError       **error);
EGdbusCalFactory *e_gdbus_cal_factory_proxy_new_sync (GDBusConnection     *connection,
                       GDBusProxyFlags      flags,
                       const gchar         *name,
                       const gchar         *object_path,
                       GCancellable        *cancellable,
                       GError             **error);

void e_gdbus_cal_factory_proxy_new_for_bus (GBusType             bus_type,
                           GDBusProxyFlags      flags,
                           const gchar         *name,
                           const gchar         *object_path,
                           GCancellable        *cancellable,
                           GAsyncReadyCallback  callback,
                           gpointer             user_data);
EGdbusCalFactory *e_gdbus_cal_factory_proxy_new_for_bus_finish (GAsyncResult  *res,
                                 GError       **error);
EGdbusCalFactory *e_gdbus_cal_factory_proxy_new_for_bus_sync (GBusType             bus_type,
                               GDBusProxyFlags      flags,
                               const gchar         *name,
                               const gchar         *object_path,
                               GCancellable        *cancellable,
                               GError             **error);

/* ---------------------------------------------------------------------- */

typedef struct _EGdbusCalFactoryStub EGdbusCalFactoryStub;
typedef struct _EGdbusCalFactoryStubClass EGdbusCalFactoryStubClass;

/**
 * EGdbusCalFactoryStubPrivate:
 *
 * The #EGdbusCalFactoryStubPrivate structure contains only private data.
 */
typedef struct _EGdbusCalFactoryStubPrivate EGdbusCalFactoryStubPrivate;

/**
 * EGdbusCalFactoryStub:
 *
 * The #EGdbusCalFactoryStub structure contains only private data and
 * should only be accessed using the provided API.
 */
struct _EGdbusCalFactoryStub
{
  GObject parent_instance;
  EGdbusCalFactoryStubPrivate *priv;
};

/**
 * EGdbusCalFactoryStubClass:
 *
 * Class structure for #EGdbusCalFactoryStub.
 */
struct _EGdbusCalFactoryStubClass
{
  GObjectClass parent_class;
};

#define E_GDBUS_TYPE_CAL_FACTORY_STUB (e_gdbus_cal_factory_stub_get_type ())
GType e_gdbus_cal_factory_stub_get_type (void) G_GNUC_CONST;

EGdbusCalFactory *e_gdbus_cal_factory_stub_new (void);

guint e_gdbus_cal_factory_register_object (EGdbusCalFactory *object,
                    GDBusConnection *connection,
                    const gchar *object_path,
                    GError **error);

void e_gdbus_cal_factory_drain_notify (EGdbusCalFactory *object);

const GDBusInterfaceInfo *e_gdbus_cal_factory_interface_info (void) G_GNUC_CONST;

struct _EGdbusCalFactoryIface
{
  GTypeInterface parent_iface;

  /* Signal handlers for receiving D-Bus signals: */

  /* Signal handlers for handling D-Bus method calls: */
  gboolean (*handle_get_cal) (
        EGdbusCalFactory *object,
        GDBusMethodInvocation *invocation,
        const gchar *in_source,
        guint in_type);
};

/* C Bindings for properties */

/* D-Bus Methods */
void e_gdbus_cal_factory_call_get_cal (
        EGdbusCalFactory *proxy,
        const gchar *in_source,
        guint in_type,
        GCancellable *cancellable,
        GAsyncReadyCallback callback,
        gpointer user_data);

gboolean e_gdbus_cal_factory_call_get_cal_finish (
        EGdbusCalFactory *proxy,
        gchar **out_path,
        GAsyncResult *res,
        GError **error);

gboolean e_gdbus_cal_factory_call_get_cal_sync (
        EGdbusCalFactory *proxy,
        const gchar *in_source,
        guint in_type,
        gchar **out_path,
        GCancellable *cancellable,
        GError **error);

/* D-Bus Methods Completion Helpers */
void e_gdbus_cal_factory_complete_get_cal (
        EGdbusCalFactory *object,
        GDBusMethodInvocation *invocation,
        const gchar *out_path);

/* D-Bus Signal Emission Helpers */

G_END_DECLS

#endif /* __E_GDBUS_E_GDBUS_CAL_FACTORY_H__ */
