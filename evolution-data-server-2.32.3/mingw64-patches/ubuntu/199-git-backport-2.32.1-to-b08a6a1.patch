From: Mathieu Trudel-Lapierre <mathieu.trudel-lapierre@canonical.com>
Subject: Backport various fixes to 2.32.1 from git.

From the upstream gnome-2-32 git tree tag EVOLUTION_DATA_SERVER_2_32_1 up to
commit b08a6a1:

 - Bug #633181 - Deadlock after moving some mails in maildir
 - Bug #634573 - Crash when importing ics file
 - Bug #635550 - e-calendar-factory leaks memory
 - Bug #635673 - Stack overflow when opening slow calendar
 - Bug #624420 - Crash camel_imapx_server_append_message
 - Bug #625048 - Fails to detect America/New York system timezone
 - bmo#6498 - Filters are not applied to imapx Inboxes
 - Do not store and generate local:/system URIs (LP: #689771)
 - Bug #634385 - Crash in smtp_connect

Note, two additional fixes are within this range of commits, but applied
elsewhere:

 - Bug 635572 - Various linking failures (in 01-various-linking-issues.patch)
   (commit 15c7d89)
 - Bug #632962 - Duplicate "On this computer" sources after update
   (in 02-fix-sources-migration.patch) (commit 132709b)

diff --git a/calendar/backends/file/e-cal-backend-file.c b/calendar/backends/file/e-cal-backend-file.c
index b35f7d5..c2001be 100644
--- a/calendar/backends/file/e-cal-backend-file.c
+++ b/calendar/backends/file/e-cal-backend-file.c
@@ -2886,16 +2886,20 @@ fetch_attachments (ECalBackendSync *backend, ECalComponent *comp)
 		user_data_dir, "calendar", "system", NULL);
 
 	for (l = attach_list; l; l = l->next) {
-		gchar *sfname = (gchar *)l->data;
+		gchar *sfname = g_filename_from_uri ((const gchar *)l->data, NULL, NULL);
 		gchar *filename, *new_filename;
 		GMappedFile *mapped_file;
 		GError *error = NULL;
 
+		if (!sfname)
+			continue;
+
 		mapped_file = g_mapped_file_new (sfname, FALSE, &error);
 		if (!mapped_file) {
 			g_message ("DEBUG: could not map %s: %s\n",
-				   sfname, error->message);
+				   sfname, error ? error->message : "???");
 			g_error_free (error);
+			g_free (sfname);
 			continue;
 		}
 		filename = g_path_get_basename (sfname);
@@ -2924,6 +2928,7 @@ fetch_attachments (ECalBackendSync *backend, ECalComponent *comp)
 		dest_url = g_filename_to_uri (dest_file, NULL, NULL);
 		g_free (dest_file);
 		new_attach_list = g_slist_append (new_attach_list, dest_url);
+		g_free (sfname);
 	}
 	g_free (attach_store);
 	e_cal_component_set_attachment_list (comp, new_attach_list);
diff --git a/calendar/libecal/e-cal-component.c b/calendar/libecal/e-cal-component.c
index 9346992..37bd900 100644
--- a/calendar/libecal/e-cal-component.c
+++ b/calendar/libecal/e-cal-component.c
@@ -24,8 +24,10 @@
 #include <unistd.h>
 #include <glib.h>
 #include <glib/gi18n-lib.h>
+#include <glib/gstdio.h>
 #include "e-cal-component.h"
 #include "e-cal-time-util.h"
+#include "libedataserver/e-data-server-util.h"
 
 
 
@@ -56,6 +58,10 @@ struct attendee {
 struct attachment {
 	icalproperty *prop;
 	icalattach *attach;
+
+	/* for inline attachments, where the file is stored;
+	   it unlinks it on attachment free. */
+	gchar *temporary_filename;
 };
 
 struct text {
@@ -248,6 +254,30 @@ free_alarm_cb (gpointer key, gpointer value, gpointer data)
 	return TRUE;
 }
 
+static void
+free_attachment (struct attachment *attachment)
+{
+	if (!attachment)
+		return;
+
+	icalattach_unref (attachment->attach);
+
+	if (attachment->temporary_filename) {
+		gchar *sep;
+
+		g_unlink (attachment->temporary_filename);
+
+		sep = strrchr (attachment->temporary_filename, G_DIR_SEPARATOR);
+		if (sep) {
+			*sep = '\0';
+			g_rmdir (attachment->temporary_filename);
+		}
+	}
+
+	g_free (attachment->temporary_filename);
+	g_free (attachment);
+}
+
 /* Frees the internal icalcomponent only if it does not have a parent.  If it
  * does, it means we don't own it and we shouldn't free it.
  */
@@ -255,7 +285,6 @@ static void
 free_icalcomponent (ECalComponent *comp, gboolean free)
 {
 	ECalComponentPrivate *priv;
-	GSList *l;
 
 	priv = comp->priv;
 
@@ -268,20 +297,11 @@ free_icalcomponent (ECalComponent *comp, gboolean free)
 
 	priv->status = NULL;
 
-	for (l = priv->attachment_list; l != NULL; l = l->next) {
-		struct attachment *attachment;
-
-		attachment = l->data;
-
-		icalattach_unref (attachment->attach);
-		g_free (attachment);
-	}
-
+	g_slist_foreach (priv->attachment_list, (GFunc) free_attachment, NULL);
 	g_slist_free (priv->attachment_list);
 	priv->attachment_list = NULL;
 
-	for (l = priv->attendee_list; l != NULL; l = l->next)
-		g_free (l->data);
+	g_slist_foreach (priv->attendee_list, (GFunc) g_free, NULL);
 	g_slist_free (priv->attendee_list);
 	priv->attendee_list = NULL;
 
@@ -503,7 +523,7 @@ scan_attachment (GSList **attachment_list, icalproperty *prop)
 {
 	struct attachment *attachment;
 
-	attachment = g_new (struct attachment, 1);
+	attachment = g_new0 (struct attachment, 1);
 	attachment->prop = prop;
 
 	attachment->attach = icalproperty_get_attach (prop);
@@ -1459,27 +1479,50 @@ e_cal_component_set_uid (ECalComponent *comp, const gchar *uid)
 	icalproperty_set_uid (priv->uid, (gchar *) uid);
 }
 
+static gboolean
+case_contains (const gchar *where, const gchar *what)
+{
+	gchar *lwhere, *lwhat;
+	gboolean res = FALSE;
+
+	if (!where || !what) {
+		return FALSE;
+	}
+
+	lwhere = g_ascii_strdown (where, -1);
+	lwhat = g_ascii_strdown (what, -1);
+
+	res = lwhere && lwhat && strstr (lwhere, lwhat) != NULL;
+
+	g_free (lwhat);
+	g_free (lwhere);
+
+	return res;
+}
+
 /* Gets a text list value */
 static void
-get_attachment_list (GSList *attachment_list, GSList **al)
+get_attachment_list (ECalComponent *comp, GSList *attachment_list, GSList **al)
 {
 	GSList *l;
+	gint index;
 
 	*al = NULL;
 
 	if (!attachment_list)
 		return;
 
-	for (l = attachment_list; l; l = l->next) {
+	for (index = 0, l = attachment_list; l; l = l->next, index++) {
 		struct attachment *attachment;
-		const gchar *data;
-		gsize buf_size;
 		gchar *buf = NULL;
 
 		attachment = l->data;
 		g_return_if_fail (attachment->attach != NULL);
 
 		if (icalattach_get_is_url (attachment->attach)) {
+			const gchar *data;
+			gsize buf_size;
+
 			/* FIXME : this ref count is screwed up
 			 * These structures are being leaked.
 			 */
@@ -1488,10 +1531,75 @@ get_attachment_list (GSList *attachment_list, GSList **al)
 			buf_size = strlen (data);
 			buf = g_malloc0 (buf_size+1);
 			icalvalue_decode_ical_string (data, buf, buf_size);
+		} else if (attachment->prop) {
+			if (!attachment->temporary_filename) {
+				icalparameter *encoding_par = icalproperty_get_first_parameter (attachment->prop, ICAL_ENCODING_PARAMETER);
+				if (encoding_par) {
+					gchar *str_value = icalproperty_get_value_as_string_r (attachment->prop);
+
+					if (str_value) {
+						icalparameter_encoding encoding = icalparameter_get_encoding (encoding_par);
+						guint8 *data = NULL;
+						gsize data_len = 0;
+
+						switch (encoding) {
+						case ICAL_ENCODING_8BIT:
+							data = (guint8 *) str_value;
+							data_len = strlen (str_value);
+							str_value = NULL;
+							break;
+						case ICAL_ENCODING_BASE64:
+							data = g_base64_decode (str_value, &data_len);
+							break;
+						default:
+							break;
+						}
+
+						if (data) {
+							gchar *dir, *id_str;
+							ECalComponentId *id = e_cal_component_get_id (comp);
+
+							id_str = g_strconcat (id ? id->uid : NULL, "-", id ? id->rid : NULL, NULL);
+							dir = g_build_filename (e_get_user_cache_dir (), "tmp", "calendar", id_str, NULL);
+							e_cal_component_free_id (id);
+							g_free (id_str);
+
+							if (g_mkdir_with_parents (dir, 0700) >= 0) {
+								icalparameter *param;
+								gchar *file = NULL;
+
+								for (param = icalproperty_get_first_parameter (attachment->prop, ICAL_X_PARAMETER);
+								     param && !file;
+								     param = icalproperty_get_next_parameter (attachment->prop, ICAL_X_PARAMETER)) {
+									if (case_contains (icalparameter_get_xname (param), "NAME") && icalparameter_get_xvalue (param) && *icalparameter_get_xvalue (param))
+										file = g_strdup (icalparameter_get_xvalue (param));
+								}
+
+								if (!file)
+									file = g_strdup_printf ("%d.dat", index);
+
+								attachment->temporary_filename = g_build_filename (dir, file, NULL);
+								if (!g_file_set_contents (attachment->temporary_filename, (const gchar *) data, data_len, NULL)) {
+									g_free (attachment->temporary_filename);
+									attachment->temporary_filename = NULL;
+								}
+							}
+
+							g_free (dir);
+						}
+
+						g_free (str_value);
+						g_free (data);
+					}
+				}
+			}
+
+			if (attachment->temporary_filename)
+				buf = g_filename_to_uri (attachment->temporary_filename, NULL, NULL);
 		}
-		else
-			data = NULL;
-		*al = g_slist_prepend (*al, (gchar *)buf);
+
+		if (buf)
+			*al = g_slist_prepend (*al, buf);
 	}
 
 	*al = g_slist_reverse (*al);
@@ -1515,9 +1623,7 @@ set_attachment_list (icalcomponent *icalcomp,
 			g_return_if_fail (attachment->attach != NULL);
 
 			icalcomponent_remove_property (icalcomp, attachment->prop);
-			icalproperty_free (attachment->prop);
-			icalattach_unref (attachment->attach);
-			g_free (attachment);
+			free_attachment (attachment);
 		}
 
 		g_slist_free (*attachment_list);
@@ -1564,7 +1670,7 @@ e_cal_component_get_attachment_list (ECalComponent *comp, GSList **attachment_li
 	priv = comp->priv;
 	g_return_if_fail (priv->icalcomp != NULL);
 
-	get_attachment_list (priv->attachment_list, attachment_list);
+	get_attachment_list (comp, priv->attachment_list, attachment_list);
 }
 
 /**
diff --git a/calendar/libecal/e-cal-system-timezone.c b/calendar/libecal/e-cal-system-timezone.c
index 295bad3..dae32c0 100644
--- a/calendar/libecal/e-cal-system-timezone.c
+++ b/calendar/libecal/e-cal-system-timezone.c
@@ -208,6 +208,27 @@ system_timezone_read_etc_conf_d_clock (void)
                                               "TIMEZONE");
 }
 
+static void
+update_fallback (gchar **fallback, gchar *adept)
+{
+	g_return_if_fail (fallback != NULL);
+
+	if (!*fallback) {
+		*fallback = adept;
+		return;
+	}
+
+	if (!adept)
+		return;
+
+	if (strlen (*fallback) < strlen (adept)) {
+		g_free (*fallback);
+		*fallback = adept;
+	} else {
+		g_free (adept);
+	}
+}
+
 typedef gboolean (*CompareFiles) (struct stat *a_stat,
 				  struct stat *b_stat,
 				  const gchar  *a_content,
@@ -219,7 +240,9 @@ recursive_compare (struct stat  *localtime_stat,
 		   const gchar   *localtime_content,
 		   gsize	 localtime_content_len,
 		   const gchar	*file,
-		   CompareFiles  compare_func)
+		   CompareFiles  compare_func,
+		   gint deep_level,
+		   gchar **fallback)
 {
 	struct stat file_stat;
 
@@ -231,9 +254,14 @@ recursive_compare (struct stat  *localtime_stat,
 				  &file_stat,
 				  localtime_content,
 				  localtime_content_len,
-				  file))
+				  file)) {
+			if (deep_level <= 1) {
+				update_fallback (fallback, system_timezone_strip_path_if_valid (file));
+				return NULL;
+			}
+
 			return system_timezone_strip_path_if_valid (file);
-		else
+		} else
 			return NULL;
 	} else if (S_ISDIR (file_stat.st_mode)) {
 		GDir       *dir = NULL;
@@ -252,7 +280,9 @@ recursive_compare (struct stat  *localtime_stat,
 						 localtime_content,
 						 localtime_content_len,
 						 subpath,
-						 compare_func);
+						 compare_func,
+						 deep_level + 1,
+						 fallback);
 
 			g_free (subpath);
 
@@ -300,6 +330,7 @@ static gchar *
 system_timezone_read_etc_localtime_hardlink (void)
 {
 	struct stat stat_localtime;
+	gchar *retval, *fallback = NULL;
 
 	if (g_stat (ETC_LOCALTIME, &stat_localtime) != 0)
 		return NULL;
@@ -307,11 +338,20 @@ system_timezone_read_etc_localtime_hardlink (void)
 	if (!S_ISREG (stat_localtime.st_mode))
 		return NULL;
 
-	return recursive_compare (&stat_localtime,
+	retval = recursive_compare (&stat_localtime,
 				  NULL,
 				  0,
 				  SYSTEM_ZONEINFODIR,
-				  files_are_identical_inode);
+				  files_are_identical_inode,
+				  0,
+				  &fallback);
+
+	if (retval)
+		g_free (fallback);
+	else
+		retval = fallback;
+
+	return retval;
 }
 
 static gboolean
@@ -350,7 +390,7 @@ system_timezone_read_etc_localtime_content (void)
 	struct stat  stat_localtime;
 	gchar	*localtime_content = NULL;
 	gsize	localtime_content_len = -1;
-	gchar	*retval;
+	gchar	*retval, *fallback = NULL;
 
 	if (g_stat (ETC_LOCALTIME, &stat_localtime) != 0)
 		return NULL;
@@ -368,10 +408,17 @@ system_timezone_read_etc_localtime_content (void)
 				   localtime_content,
 				   localtime_content_len,
 				   SYSTEM_ZONEINFODIR,
-				   files_are_identical_content);
+				   files_are_identical_content,
+				   0,
+				   &fallback);
 
 	g_free (localtime_content);
 
+	if (retval)
+		g_free (fallback);
+	else
+		retval = fallback;
+
 	return retval;
 }
 
diff --git a/calendar/libecal/e-cal.c b/calendar/libecal/e-cal.c
index ccf633c..9adb7a6 100644
--- a/calendar/libecal/e-cal.c
+++ b/calendar/libecal/e-cal.c
@@ -1354,7 +1354,7 @@ e_cal_open (ECal *ecal, gboolean only_if_exists, GError **error)
 struct idle_async_error_reply_data
 {
 	ECal *ecal; /* ref-ed */
-	GError *error; /* cannot be NULL */
+	GError *error; /* can be NULL */
 };
 
 static gboolean
@@ -1364,17 +1364,32 @@ idle_async_error_reply_cb (gpointer user_data)
 
 	g_return_val_if_fail (data != NULL, FALSE);
 	g_return_val_if_fail (data->ecal != NULL, FALSE);
-	g_return_val_if_fail (data->error != NULL, FALSE);
 
 	async_open_report_result (data->ecal, data->error);
 
 	g_object_unref (data->ecal);
-	g_error_free (data->error);
+	if (data->error)
+		g_error_free (data->error);
 	g_free (data);
 
 	return FALSE;
 }
 
+/* takes ownership of error */
+static void
+async_report_idle (ECal *ecal, GError *error)
+{
+	struct idle_async_error_reply_data *data;
+
+	g_return_if_fail (ecal != NULL);
+
+	data = g_new0 (struct idle_async_error_reply_data, 1);
+	data->ecal = g_object_ref (ecal);
+	data->error = error;
+
+	g_idle_add (idle_async_error_reply_cb, data);
+}
+
 /**
  * e_cal_open_async:
  * @ecal: A calendar client.
@@ -1409,20 +1424,10 @@ e_cal_open_async (ECal *ecal, gboolean only_if_exists)
 	switch (priv->load_state) {
 	case E_CAL_LOAD_AUTHENTICATING :
 	case E_CAL_LOAD_LOADING :
-		#ifndef E_CAL_DISABLE_DEPRECATED
-		g_signal_emit (G_OBJECT (ecal), e_cal_signals[CAL_OPENED], 0, E_CALENDAR_STATUS_BUSY);
-		#endif
-
-		error = g_error_new_literal (E_CALENDAR_ERROR, E_CALENDAR_STATUS_BUSY, e_cal_get_error_message (E_CALENDAR_STATUS_BUSY));
-		g_signal_emit (G_OBJECT (ecal), e_cal_signals[CAL_OPENED_EX], 0, error);
-		g_error_free (error);
+		async_report_idle (ecal, g_error_new_literal (E_CALENDAR_ERROR, E_CALENDAR_STATUS_BUSY, e_cal_get_error_message (E_CALENDAR_STATUS_BUSY)));
 		return;
 	case E_CAL_LOAD_LOADED :
-		#ifndef E_CAL_DISABLE_DEPRECATED
-		g_signal_emit (G_OBJECT (ecal), e_cal_signals[CAL_OPENED], 0, E_CALENDAR_STATUS_OK);
-		#endif
-
-		g_signal_emit (G_OBJECT (ecal), e_cal_signals[CAL_OPENED_EX], 0, NULL);
+		async_report_idle (ecal, NULL /* success */);
 		return;
 	default:
 		/* ignore everything else */
@@ -1434,14 +1439,9 @@ e_cal_open_async (ECal *ecal, gboolean only_if_exists)
 		&status,
 		#endif
 		FALSE, TRUE);
-	if (error) {
-		struct idle_async_error_reply_data *data;
 
-		data = g_new0 (struct idle_async_error_reply_data, 1);
-		data->ecal = g_object_ref (ecal);
-		data->error = error;
-		g_idle_add (idle_async_error_reply_cb, data);
-	}
+	if (error)
+		async_report_idle (ecal, error);
 }
 
 /**
diff --git a/calendar/libedata-cal/e-cal-backend-file-store.c b/calendar/libedata-cal/e-cal-backend-file-store.c
index fd07797..cd6ab59 100644
--- a/calendar/libedata-cal/e-cal-backend-file-store.c
+++ b/calendar/libedata-cal/e-cal-backend-file-store.c
@@ -831,8 +831,6 @@ timeout_save_cache (gpointer user_data)
 	if (g_rename (tmpfile, priv->cache_file_name) != 0)
 		g_unlink (tmpfile);
 
-	e_file_cache_thaw_changes (priv->keys_cache);
-
 error:
 	g_static_rw_lock_reader_unlock (&priv->lock);
 	g_free (tmpfile);
diff --git a/calendar/libedata-cal/e-cal-backend-intervaltree.c b/calendar/libedata-cal/e-cal-backend-intervaltree.c
index a1fb2c9..0ed0dd9 100644
--- a/calendar/libedata-cal/e-cal-backend-intervaltree.c
+++ b/calendar/libedata-cal/e-cal-backend-intervaltree.c
@@ -291,6 +291,10 @@ e_intervaltree_insert (EIntervalTree *tree, time_t start, time_t end, ECalCompon
 
 	g_static_rec_mutex_lock (&priv->mutex);
 
+	e_cal_component_get_uid (comp, &uid);
+	rid = e_cal_component_get_recurid_as_string (comp);
+	e_intervaltree_remove (tree, uid, rid);
+
 	x = g_new (EIntervalNode, 1);
 	x->min = x->start = start;
 	x->max = x->end = end;
@@ -354,8 +358,6 @@ e_intervaltree_insert (EIntervalTree *tree, time_t start, time_t end, ECalCompon
 	}
 
 	priv->root->left->red = FALSE;
-	e_cal_component_get_uid (comp, &uid);
-	rid = e_cal_component_get_recurid_as_string (comp);
 	g_hash_table_insert (priv->id_node_hash, component_key(uid, rid), newNode);
 	g_free (rid);
 
@@ -615,12 +617,15 @@ e_intervaltree_dump (EIntervalTree *tree)
 /**
   * Caller should hold the lock.	
  **/
-static EIntervalNode*
+static EIntervalNode *
 e_intervaltree_search_component (EIntervalTree *tree,
 				 const gchar *searched_uid,
 				 const gchar *searched_rid)
 {
 	EIntervalTreePrivate *priv;
+	EIntervalNode *node;
+	gchar *key;
+
 	g_return_val_if_fail (tree != NULL, NULL);
 	g_return_val_if_fail (searched_uid != NULL, NULL);
 
@@ -633,7 +638,11 @@ e_intervaltree_search_component (EIntervalTree *tree,
 		return NULL;
 	}
 
-	return g_hash_table_lookup (priv->id_node_hash, component_key(searched_uid, searched_rid));
+	key = component_key (searched_uid, searched_rid);
+	node = g_hash_table_lookup (priv->id_node_hash, key);
+	g_free (key);
+
+	return node;
 }
 
 /**
@@ -652,6 +661,7 @@ e_intervaltree_remove (EIntervalTree *tree,
 	EIntervalNode *x;
 	EIntervalNode *z;
 	EIntervalNode *nil, *root;
+	gchar *key;
 
 	g_return_val_if_fail (tree != NULL, FALSE);
 
@@ -662,9 +672,7 @@ e_intervaltree_remove (EIntervalTree *tree,
 
 	z = e_intervaltree_search_component (tree, uid, rid);
 
-	if (!z || z == nil)
-	{
-		g_message (G_STRLOC ": Cannot remove node - could not find node in tree\n");
+	if (!z || z == nil) {
 		g_static_rec_mutex_unlock (&priv->mutex);
 		return FALSE;
 	}
@@ -722,7 +730,9 @@ e_intervaltree_remove (EIntervalTree *tree,
 			e_intervaltree_fixup_deletion (tree, x);
 	}
 
-	g_hash_table_remove (priv->id_node_hash, component_key(uid, rid));
+	key = component_key (uid, rid);
+	g_hash_table_remove (priv->id_node_hash, key);
+	g_free (key);
 
 	g_object_unref (z->comp);
 	g_free (z);
@@ -769,8 +779,9 @@ e_intervaltree_init (EIntervalTree *tree)
 {
 	EIntervalTreePrivate *priv;
 	EIntervalNode *root, *nil;
-	priv = g_new0 (EIntervalTreePrivate, 1);
-	tree->priv = priv;
+
+	tree->priv = E_INTERVALTREE_GET_PRIVATE (tree);
+	priv = tree->priv;
 
 	priv->nil = nil = g_new (EIntervalNode, 1);
 	nil->parent = nil->left = nil->right = nil;
diff --git a/calendar/libedata-cal/test-intervaltree.c b/calendar/libedata-cal/test-intervaltree.c
index 9b17177..5d47a08 100644
--- a/calendar/libedata-cal/test-intervaltree.c
+++ b/calendar/libedata-cal/test-intervaltree.c
@@ -144,7 +144,7 @@ static ECalComponent*
 create_test_component (time_t start, time_t end)
 {
 	ECalComponent *comp = e_cal_component_new ();
-	ECalComponentText *summary;
+	ECalComponentText summary;
 	struct icaltimetype current;
 	e_cal_component_set_new_vtype (comp, E_CAL_COMPONENT_EVENT);
 
@@ -162,12 +162,12 @@ create_test_component (time_t start, time_t end)
 	e_cal_component_set_dtend (comp, &dtend);
 	*/
 
-	summary = g_new (ECalComponentText, 1);
+	summary.value = g_strdup_printf ("%ld - %ld", start, end);
+	summary.altrep = NULL;
 
-	summary->value = g_strdup_printf ("%ld - %ld", start, end);
-	summary->altrep = NULL;
+	e_cal_component_set_summary (comp, &summary);
 
-	e_cal_component_set_summary (comp, summary);
+	g_free ((gchar *) summary.value);
 
 	current = icaltime_from_timet (time (NULL), 0);
 	e_cal_component_set_created (comp, &current);
@@ -213,7 +213,7 @@ print_list (GList *l2)
 */
 
 static void
-random_test()
+random_test (void)
 {
 	/*
 	 * outline:
@@ -248,7 +248,6 @@ random_test()
 		interval->start = start;
 		interval->end = end;
 		interval->comp = comp;
-		g_object_ref (comp);
 
 		list = g_list_insert (list, interval, -1);
 
@@ -271,7 +270,6 @@ random_test()
 		interval->start = start;
 		interval->end = _TIME_MAX;
 		interval->comp = comp;
-		g_object_ref (comp);
 		list = g_list_insert (list, interval, -1);
 
 		e_intervaltree_insert (tree, start, interval->end, comp);
@@ -416,12 +414,52 @@ random_test()
 	g_list_free (list);
 }
 
+static void
+mem_test (void)
+{
+	EIntervalTree *tree;
+	time_t start = 10, end = 50;
+	ECalComponent *comp = create_test_component (start, end), *clone_comp;
+	const gchar *uid;
+	gchar *rid;
+
+	tree = e_intervaltree_new ();
+
+	g_assert (((GObject *) comp)->ref_count == 1);
+	e_intervaltree_insert (tree, start, end, comp);
+	g_assert (((GObject *) comp)->ref_count == 2);
+
+	e_cal_component_get_uid (comp, &uid);
+	rid = e_cal_component_get_recurid_as_string (comp);
+	e_intervaltree_remove (tree, uid, rid);
+	g_free (rid);
+	g_assert (((GObject *) comp)->ref_count == 1);
+
+	e_intervaltree_insert (tree, start, end, comp);
+	g_assert (((GObject *) comp)->ref_count == 2);
+
+	clone_comp = e_cal_component_clone (comp);
+	e_intervaltree_insert (tree, start, end, clone_comp);
+
+	g_assert (((GObject *) comp)->ref_count == 1);
+	g_assert (((GObject *) clone_comp)->ref_count == 2);
+
+	e_intervaltree_destroy (tree);
+
+	g_assert (((GObject *) comp)->ref_count == 1);
+	g_assert (((GObject *) clone_comp)->ref_count == 1);
+
+	g_object_unref (comp);
+	g_object_unref (clone_comp);
+}
+
 gint
 main (gint argc, gchar **argv)
 {
 	g_type_init ();
 
 	myrand = g_rand_new ();
+	mem_test ();
 	random_test();
 	g_print ("Everything OK\n");
 
diff --git a/camel/camel-folder-summary.c b/camel/camel-folder-summary.c
index d9cd871..6b460a9 100644
--- a/camel/camel-folder-summary.c
+++ b/camel/camel-folder-summary.c
@@ -1275,8 +1275,10 @@ message_info_from_uid (CamelFolderSummary *s, const gchar *uid)
 		ret = camel_db_read_message_info_record_with_uid (
 			cdb, folder_name, uid, &data,
 			camel_read_mir_callback, NULL);
-		if (ret != 0)
+		if (ret != 0) {
+			camel_folder_summary_unlock (s, CAMEL_FOLDER_SUMMARY_SUMMARY_LOCK);
 			return NULL;
+		}
 
 		/* We would have double reffed at camel_read_mir_callback */
 		info = g_hash_table_lookup (s->loaded_infos, uid);
diff --git a/camel/camel-tcp-stream-raw.c b/camel/camel-tcp-stream-raw.c
index 5695f62..11869c0 100644
--- a/camel/camel-tcp-stream-raw.c
+++ b/camel/camel-tcp-stream-raw.c
@@ -285,7 +285,7 @@ read_from_prfd (PRFileDesc *fd, gchar *buffer, gsize n, GError **error)
 		PRSocketOptionData sockopts;
 		PRPollDesc pollfds[2];
 		gboolean nonblock;
-		gint error;
+		gint saved_errno;
 
 		/* get O_NONBLOCK options */
 		sockopts.option = PR_SockOpt_Nonblocking;
@@ -333,11 +333,11 @@ read_from_prfd (PRFileDesc *fd, gchar *buffer, gsize n, GError **error)
 
 		/* restore O_NONBLOCK options */
 	failed:
-		error = errno;
+		saved_errno = errno;
 		sockopts.option = PR_SockOpt_Nonblocking;
 		sockopts.value.non_blocking = nonblock;
 		PR_SetSocketOption (fd, &sockopts);
-		errno = error;
+		errno = saved_errno;
 	}
 
 	if (nread == -1)
@@ -388,7 +388,7 @@ write_to_prfd (PRFileDesc *fd, const gchar *buffer, gsize n, GError **error)
 		PRSocketOptionData sockopts;
 		PRPollDesc pollfds[2];
 		gboolean nonblock;
-		gint error;
+		gint saved_errno;
 
 		/* get O_NONBLOCK options */
 		sockopts.option = PR_SockOpt_Nonblocking;
@@ -440,15 +440,17 @@ write_to_prfd (PRFileDesc *fd, const gchar *buffer, gsize n, GError **error)
 		} while (w != -1 && written < n);
 
 		/* restore O_NONBLOCK options */
-		error = errno;
+		saved_errno = errno;
 		sockopts.option = PR_SockOpt_Nonblocking;
 		sockopts.value.non_blocking = nonblock;
 		PR_SetSocketOption (fd, &sockopts);
-		errno = error;
+		errno = saved_errno;
 	}
 
-	if (w == -1)
+	if (w == -1) {
 		_set_g_error_from_errno (error, TRUE);
+		written = -1;
+	}
 
 	return written;
 }
diff --git a/camel/providers/imap/camel-imap-provider.c b/camel/providers/imap/camel-imap-provider.c
index 9cc1561..25f38bb 100644
--- a/camel/providers/imap/camel-imap-provider.c
+++ b/camel/providers/imap/camel-imap-provider.c
@@ -63,7 +63,7 @@ static CamelProviderConfEntry imap_conf_entries[] = {
 	{ CAMEL_PROVIDER_CONF_SECTION_END },
 	{ CAMEL_PROVIDER_CONF_SECTION_START, "general", NULL, N_("Options") },
 	{ CAMEL_PROVIDER_CONF_CHECKBOX, "filter", NULL,
-	  N_("_Apply filters to new messages in INBOX on this server"), "0" },
+	  N_("_Apply filters to new messages in INBOX on this server"), "1" },
 	{ CAMEL_PROVIDER_CONF_CHECKBOX, "filter_junk", NULL,
 	  N_("Check new messages for Jun_k contents"), "0" },
 	{ CAMEL_PROVIDER_CONF_CHECKBOX, "filter_junk_inbox", "filter_junk",
diff --git a/camel/providers/imapx/camel-imapx-provider.c b/camel/providers/imapx/camel-imapx-provider.c
index 6aafb9e..6a92414 100644
--- a/camel/providers/imapx/camel-imapx-provider.c
+++ b/camel/providers/imapx/camel-imapx-provider.c
@@ -71,7 +71,7 @@ CamelProviderConfEntry imapx_conf_entries[] = {
 	{ CAMEL_PROVIDER_CONF_SECTION_END },
 	{ CAMEL_PROVIDER_CONF_SECTION_START, "general", NULL, N_("Options") },
 	{ CAMEL_PROVIDER_CONF_CHECKBOX, "filter", NULL,
-	  N_("_Apply filters to new messages in INBOX on this server"), "0" },
+	  N_("_Apply filters to new messages in INBOX on this server"), "1" },
 	{ CAMEL_PROVIDER_CONF_CHECKBOX, "filter_junk", NULL,
 	  N_("Check new messages for Jun_k contents"), "0" },
 	{ CAMEL_PROVIDER_CONF_CHECKBOX, "filter_junk_inbox", "filter_junk",
diff --git a/camel/providers/imapx/camel-imapx-server.c b/camel/providers/imapx/camel-imapx-server.c
index 87b1745..bde4026 100644
--- a/camel/providers/imapx/camel-imapx-server.c
+++ b/camel/providers/imapx/camel-imapx-server.c
@@ -5202,7 +5202,8 @@ camel_imapx_server_append_message(CamelIMAPXServer *is, CamelFolder *folder, Cam
 	tmp = camel_data_cache_get_filename (ifolder->cache, "new", uid, NULL);
 	info = camel_folder_summary_info_new_from_message((CamelFolderSummary *)folder->summary, message, NULL);
 	info->uid = camel_pstring_strdup (uid);
-	((CamelMessageInfoBase *) info)->flags = ((CamelMessageInfoBase *) mi)->flags;
+	if (mi)
+		((CamelMessageInfoBase *) info)->flags = ((CamelMessageInfoBase *) mi)->flags;
 	g_free (uid);
 
 	/* So, we actually just want to let the server loop that
diff --git a/camel/providers/smtp/camel-smtp-transport.c b/camel/providers/smtp/camel-smtp-transport.c
index 4d855c6..9f927ee 100644
--- a/camel/providers/smtp/camel-smtp-transport.c
+++ b/camel/providers/smtp/camel-smtp-transport.c
@@ -519,13 +519,20 @@ smtp_connect (CamelService *service, GError **error)
 				transport, authtype->authproto, &local_error);
 			if (!authenticated) {
 				if (g_error_matches (local_error, G_IO_ERROR, G_IO_ERROR_CANCELLED) ||
-				    g_error_matches (local_error, CAMEL_SERVICE_ERROR, CAMEL_SERVICE_ERROR_UNAVAILABLE))
+				    g_error_matches (local_error, CAMEL_SERVICE_ERROR, CAMEL_SERVICE_ERROR_UNAVAILABLE)) {
+					g_free (service->url->passwd);
+					service->url->passwd = NULL;
+
+					if (local_error)
+						g_clear_error (&local_error);
+
 					return FALSE;
+				}
 
 				errbuf = g_markup_printf_escaped (
 					_("Unable to authenticate "
 					  "to SMTP server.\n%s\n\n"),
-					local_error->message);
+					local_error ? local_error->message : _("Unknown error"));
 				g_clear_error (&local_error);
 
 				g_free (service->url->passwd);
diff --git a/configure.ac b/configure.ac
index 31d3e82..dd8acf5 100644
--- a/configure.ac
+++ b/configure.ac
@@ -1,7 +1,7 @@
 dnl Evolution-Data-Server version
 m4_define([eds_major_version], [2])
 m4_define([eds_minor_version], [32])
-m4_define([eds_micro_version], [1])
+m4_define([eds_micro_version], [2])
 
 m4_define([eds_version],
 	[eds_major_version.eds_minor_version.eds_micro_version])
diff --git a/libedataserver/e-source.c b/libedataserver/e-source.c
index 990e78d..49121db 100644
--- a/libedataserver/e-source.c
+++ b/libedataserver/e-source.c
@@ -342,7 +342,12 @@ e_source_update_from_xml_node (ESource *source,
 
 	if (absolute_uri != NULL) {
 		g_free (source->priv->absolute_uri);
-		source->priv->absolute_uri = g_strdup ((gchar *)absolute_uri);
+
+		if (relative_uri && g_str_equal ((const gchar *) relative_uri, "system") &&
+		    (g_str_has_prefix ((const gchar *) absolute_uri, "file:") || g_str_equal ((const gchar *) absolute_uri, "local:/system")))
+			source->priv->absolute_uri = NULL;
+		else
+			source->priv->absolute_uri = g_strdup ((gchar *)absolute_uri);
 		changed = TRUE;
 	}
 
@@ -445,7 +450,7 @@ e_source_build_absolute_uri (ESource *source)
 		uri_str = g_strconcat (base_uri_str, source->priv->relative_uri, NULL);
 	else {
 		if (source->priv->relative_uri != NULL)
-			uri_str = g_strconcat (base_uri_str, "/", source->priv->relative_uri,
+			uri_str = g_strconcat (base_uri_str, g_str_equal (base_uri_str, "local:") ? "" : "/", source->priv->relative_uri,
 				       NULL);
 		else
 			uri_str = g_strdup (base_uri_str);
@@ -697,8 +702,10 @@ dump_common_to_xml_node (ESource *source,
 	xmlSetProp (node, (xmlChar*)"uid", (xmlChar*)e_source_peek_uid (source));
 	xmlSetProp (node, (xmlChar*)"name", (xmlChar*)e_source_peek_name (source));
 	abs_uri = e_source_peek_absolute_uri (source);
+	/* do not store absolute uris for local:system sources */
 	relative_uri = e_source_peek_relative_uri (source);
-	if (abs_uri)
+	if (abs_uri && !(relative_uri && g_str_equal (relative_uri, "system") &&
+		    (g_str_has_prefix (abs_uri, "file:") || g_str_has_prefix (abs_uri, "local:"))))
 		xmlSetProp (node, (xmlChar*)"uri", (xmlChar*)abs_uri);
 	if (relative_uri)
 		xmlSetProp (node, (xmlChar*)"relative_uri", (xmlChar*)relative_uri);
