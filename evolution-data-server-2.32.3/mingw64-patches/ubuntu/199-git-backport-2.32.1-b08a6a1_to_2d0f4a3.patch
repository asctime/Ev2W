From: Mathieu Trudel-Lapierre <mathieu.trudel-lapierre@canonical.com>
Subject: Pull various commits from gnome-2-32 e-d-s git tree.

Apply five additional commits from the gnome-2-32 branch of the E-D-S git tree,
commits 1b959c2 to 2d0f4a3 (despite the name, which means starting from,
without including, commit b08a6a1 (which is in a previous patch)):

 - Bug #638948 - NNTP folder doesn't implement Expunge
 - Crash on bogus component removal in file calendar backend
 - Bug 637916 - configure.ac with_nspr_includes test is incorrect
 - Bug #636334 - Birthdays&Anniversaries calendar skips local address books
 - Bug #420813 - Unnecessarily slow update/reopen of webcal calendars

Note: the patch name actually makes sense: it denotes the exact range used
to generate this patch with git diff -- ie. "git diff b08a6a1..2d0f4a3".

diff --git a/calendar/backends/contacts/e-cal-backend-contacts.c b/calendar/backends/contacts/e-cal-backend-contacts.c
index 6866497..08b7266 100644
--- a/calendar/backends/contacts/e-cal-backend-contacts.c
+++ b/calendar/backends/contacts/e-cal-backend-contacts.c
@@ -120,13 +120,13 @@ book_record_new (ECalBackendContacts *cbc, ESource *source)
         BookRecord *br;
 	GError     *error = NULL;
 
-	book = e_book_new (source, NULL);
+	book = e_book_new (source, &error);
         if (!book || !e_book_open (book, TRUE, &error) || error) {
-		g_object_unref (book);
-		if (error) {
-			g_warning ("%s: Failed to open book, error: %s", G_STRFUNC, error->message);
+		g_warning ("%s: Failed to open book '%s': %s", G_STRFUNC, e_source_peek_name (source), error ? error->message : "Unknown error");
+		if (book)
+			g_object_unref (book);
+		if (error)
 			g_error_free (error);
-		}
 		return NULL;
 	}
 
@@ -136,10 +136,16 @@ book_record_new (ECalBackendContacts *cbc, ESource *source)
         fields = g_list_append (fields, (gchar *)e_contact_field_name (E_CONTACT_ANNIVERSARY));
         query = e_book_query_any_field_contains ("");
 
-        if (!e_book_get_book_view (book, query, fields, -1, &book_view, NULL)) {
+        if (!e_book_get_book_view (book, query, fields, -1, &book_view, &error)) {
+		g_warning ("%s: Failed to get book view on '%s': %s", G_STRFUNC, e_source_peek_name (source), error ? error->message : "Unknown error");
+
                 e_book_query_unref (query);
                 g_object_unref (book);
                 g_list_free (fields);
+
+		if (error)
+			g_error_free (error);
+
                 return NULL;
         }
         e_book_query_unref (query);
@@ -306,7 +312,7 @@ is_source_usable (ESource *source, ESourceGroup *group)
 	prop = e_source_get_property (source, "use-in-contacts-calendar");
 
 	/* the later check is for backward compatibility */
-	return (prop && g_str_equal (prop, "1")) || (!prop && g_str_has_prefix (base_uri, "file://"));
+	return (prop && g_str_equal (prop, "1")) || (!prop && g_str_has_prefix (base_uri, "file://")) || (!prop && g_str_has_prefix (base_uri, "local:"));
 }
 
 /* SourceList callbacks */
diff --git a/calendar/backends/file/e-cal-backend-file.c b/calendar/backends/file/e-cal-backend-file.c
index c2001be..33bab50 100644
--- a/calendar/backends/file/e-cal-backend-file.c
+++ b/calendar/backends/file/e-cal-backend-file.c
@@ -547,9 +547,9 @@ add_component_to_intervaltree (ECalBackendFile *cbfile, ECalComponent *comp)
 static gboolean
 remove_component_from_intervaltree (ECalBackendFile *cbfile, ECalComponent *comp)
 {
-	time_t time_start = -1, time_end = -1;
 	const gchar *uid = NULL;
 	gchar *rid;
+	gboolean res;
 	ECalBackendFilePrivate *priv;
 
 	g_return_val_if_fail (cbfile != NULL, FALSE);
@@ -557,21 +557,12 @@ remove_component_from_intervaltree (ECalBackendFile *cbfile, ECalComponent *comp
 
 	priv = cbfile->priv;
 
-	e_cal_util_get_component_occur_times (comp, &time_start, &time_end,
-				   resolve_tzid, priv->icalcomp, priv->default_zone,
-				   e_cal_backend_get_kind (E_CAL_BACKEND (cbfile)));
+	rid = e_cal_component_get_recurid_as_string (comp);
+	e_cal_component_get_uid (comp, &uid);
+	res = e_intervaltree_remove (priv->interval_tree, uid, rid);
+	g_free (rid);
 
-	if (time_end != -1 && time_start > time_end) {
-		g_error ("Bogus component %s\n", e_cal_component_get_as_string (comp));
-		return FALSE;
-	} else {
-		gboolean res;
-		rid = e_cal_component_get_recurid_as_string (comp);
-		e_cal_component_get_uid (comp, &uid);
-		res = e_intervaltree_remove (priv->interval_tree, uid, rid);
-		g_free (rid);
-		return res;
-	}
+	return res;
 }
 
 /* Tries to add an icalcomponent to the file backend.  We only store the objects
diff --git a/calendar/backends/http/e-cal-backend-http.c b/calendar/backends/http/e-cal-backend-http.c
index a642069..1bca03d 100644
--- a/calendar/backends/http/e-cal-backend-http.c
+++ b/calendar/backends/http/e-cal-backend-http.c
@@ -291,20 +291,77 @@ resolve_tzid (const gchar *tzid, gpointer user_data)
 	return zone;
 }
 
-static void
+static gboolean
 put_component_to_store (ECalBackendHttp *cb,
 			ECalComponent *comp)
 {
 	time_t time_start, time_end;
 	ECalBackendHttpPrivate *priv;
+	ECalComponent *cache_comp;
+	const gchar *uid;
+	gchar *rid;
 
 	priv = cb->priv;
 
+	e_cal_component_get_uid (comp, &uid);
+	rid = e_cal_component_get_recurid_as_string (comp);
+	cache_comp = e_cal_backend_store_get_component (priv->store, uid, rid);
+	g_free (rid);
+
+	if (cache_comp) {
+		gboolean changed = TRUE;
+		struct icaltimetype stamp1, stamp2;
+
+		stamp1 = icaltime_null_time ();
+		stamp2 = icaltime_null_time ();
+
+		e_cal_component_get_dtstamp (comp, &stamp1);
+		e_cal_component_get_dtstamp (cache_comp, &stamp2);
+
+		changed = (icaltime_is_null_time (stamp1) && !icaltime_is_null_time (stamp2)) ||
+			  (!icaltime_is_null_time (stamp1) && icaltime_is_null_time (stamp2)) ||
+			  (icaltime_compare (stamp1, stamp2) != 0);
+
+		if (!changed) {
+			struct icaltimetype *last_modified1 = NULL, *last_modified2 = NULL;
+
+			e_cal_component_get_last_modified (comp, &last_modified1);
+			e_cal_component_get_last_modified (cache_comp, &last_modified2);
+
+			changed = (last_modified1 != NULL && last_modified2 == NULL) ||
+				  (last_modified1 == NULL && last_modified2 != NULL) ||
+				  (last_modified1 != NULL && last_modified2 != NULL && icaltime_compare (*last_modified1, *last_modified2) != 0);
+
+			if (last_modified1)
+				e_cal_component_free_icaltimetype (last_modified1);
+			if (last_modified2)
+				e_cal_component_free_icaltimetype (last_modified2);
+
+			if (!changed) {
+				gint *sequence1 = NULL, *sequence2 = NULL;
+
+				e_cal_component_get_sequence (comp, &sequence1);
+				e_cal_component_get_sequence (cache_comp, &sequence2);
+
+				changed = (sequence1 != NULL && sequence2 == NULL) ||
+					  (sequence1 == NULL && sequence2 != NULL) ||
+					  (sequence1 != NULL && sequence2 != NULL && *sequence1 != *sequence2);
+			}
+		}
+
+		g_object_unref (cache_comp);
+
+		if (!changed)
+			return FALSE;
+	}
+
 	e_cal_util_get_component_occur_times (comp, &time_start, &time_end,
 				   resolve_tzid, cb, priv->default_zone,
 				   e_cal_backend_get_kind (E_CAL_BACKEND (cb)));
 
 	e_cal_backend_store_put_component_with_time_range (priv->store, comp, time_start, time_end);
+
+	return TRUE;
 }
 
 static void
@@ -442,23 +499,22 @@ retrieval_done (SoupSession *session, SoupMessage *msg, ECalBackendHttp *cbhttp)
 		if (subcomp_kind == kind) {
 			comp = e_cal_component_new ();
 			if (e_cal_component_set_icalcomponent (comp, icalcomponent_new_clone (subcomp))) {
-				const gchar *uid, *orig_key, *orig_value;
+				const gchar *uid;
+				gpointer orig_key, orig_value;
 				gchar *obj;
 
-				put_component_to_store (cbhttp, comp);
 				e_cal_component_get_uid (comp, &uid);
-				/* middle (gpointer) cast only because of 'dereferencing type-punned pointer will break strict-aliasing rules' */
-				if (g_hash_table_lookup_extended (old_cache, uid, (gpointer *)(gpointer)&orig_key, (gpointer *)(gpointer)&orig_value)) {
+
+				if (!put_component_to_store (cbhttp, comp)) {
+					g_hash_table_remove (old_cache, uid);
+				} else if (g_hash_table_lookup_extended (old_cache, uid, &orig_key, &orig_value)) {
 					obj = icalcomponent_as_ical_string_r (subcomp);
-					e_cal_backend_notify_object_modified (E_CAL_BACKEND (cbhttp),
-									      orig_value,
-									      obj);
+					e_cal_backend_notify_object_modified (E_CAL_BACKEND (cbhttp), (const gchar *) orig_value, obj);
 					g_free (obj);
 					g_hash_table_remove (old_cache, uid);
 				} else {
 					obj = icalcomponent_as_ical_string_r (subcomp);
-					e_cal_backend_notify_object_created (E_CAL_BACKEND (cbhttp),
-									     obj);
+					e_cal_backend_notify_object_created (E_CAL_BACKEND (cbhttp), obj);
 					g_free (obj);
 				}
 			}
@@ -584,6 +640,7 @@ begin_retrieval_cb (ECalBackendHttp *cbhttp)
 	}
 
 	soup_message_headers_append (soup_message->request_headers, "User-Agent", "Evolution/" VERSION);
+	soup_message_headers_append (soup_message->request_headers, "Connection", "close");
 	soup_message_set_flags (soup_message, SOUP_MESSAGE_NO_REDIRECT);
 	if (priv->store) {
 		const gchar *etag = e_cal_backend_store_get_key_value (priv->store, "ETag");
@@ -685,6 +742,11 @@ e_cal_backend_http_open (ECalBackendSync *backend, EDataCal *cal, gboolean only_
 
 	cbhttp = E_CAL_BACKEND_HTTP (backend);
 	priv = cbhttp->priv;
+
+	/* already opened, thus can skip all this initialization */
+	if (priv->opened)
+		return;
+
 	source = e_cal_backend_get_source (E_CAL_BACKEND (backend));
 
 	if (priv->source_changed_id == 0) {
diff --git a/camel/camel-disco-folder.c b/camel/camel-disco-folder.c
index 0fdb9a3..825a59d 100644
--- a/camel/camel-disco-folder.c
+++ b/camel/camel-disco-folder.c
@@ -173,6 +173,7 @@ disco_refresh_info (CamelFolder *folder,
 		return TRUE;
 
 	disco_folder_class = CAMEL_DISCO_FOLDER_GET_CLASS (folder);
+	g_return_val_if_fail (disco_folder_class->refresh_info_online != NULL, FALSE);
 
 	success = disco_folder_class->refresh_info_online (folder, error);
 	CAMEL_CHECK_GERROR (folder, refresh_info_online, success, error);
@@ -199,16 +200,19 @@ disco_sync (CamelFolder *folder,
 
 	switch (camel_disco_store_status (CAMEL_DISCO_STORE (parent_store))) {
 	case CAMEL_DISCO_STORE_ONLINE:
+		g_return_val_if_fail (disco_folder_class->sync_online != NULL, FALSE);
 		success = disco_folder_class->sync_online (folder, error);
 		CAMEL_CHECK_GERROR (folder, sync_online, success, error);
 		return success;
 
 	case CAMEL_DISCO_STORE_OFFLINE:
+		g_return_val_if_fail (disco_folder_class->sync_offline != NULL, FALSE);
 		success = disco_folder_class->sync_offline (folder, error);
 		CAMEL_CHECK_GERROR (folder, sync_offline, success, error);
 		return success;
 
 	case CAMEL_DISCO_STORE_RESYNCING:
+		g_return_val_if_fail (disco_folder_class->sync_resyncing != NULL, FALSE);
 		success = disco_folder_class->sync_resyncing (folder, error);
 		CAMEL_CHECK_GERROR (folder, sync_resyncing, success, error);
 		return success;
@@ -234,6 +238,7 @@ disco_expunge_uids (CamelFolder *folder,
 
 	switch (camel_disco_store_status (CAMEL_DISCO_STORE (parent_store))) {
 	case CAMEL_DISCO_STORE_ONLINE:
+		g_return_val_if_fail (disco_folder_class->expunge_uids_online != NULL, FALSE);
 		success = disco_folder_class->expunge_uids_online (
 			folder, uids, error);
 		CAMEL_CHECK_GERROR (
@@ -241,6 +246,7 @@ disco_expunge_uids (CamelFolder *folder,
 		return success;
 
 	case CAMEL_DISCO_STORE_OFFLINE:
+		g_return_val_if_fail (disco_folder_class->expunge_uids_offline != NULL, FALSE);
 		success = disco_folder_class->expunge_uids_offline (
 			folder, uids, error);
 		CAMEL_CHECK_GERROR (
@@ -248,6 +254,7 @@ disco_expunge_uids (CamelFolder *folder,
 		return success;
 
 	case CAMEL_DISCO_STORE_RESYNCING:
+		g_return_val_if_fail (disco_folder_class->expunge_uids_resyncing != NULL, FALSE);
 		success = disco_folder_class->expunge_uids_resyncing (
 			folder, uids, error);
 		CAMEL_CHECK_GERROR (
@@ -303,18 +310,21 @@ disco_append_message (CamelFolder *folder,
 
 	switch (camel_disco_store_status (CAMEL_DISCO_STORE (parent_store))) {
 	case CAMEL_DISCO_STORE_ONLINE:
+		g_return_val_if_fail (disco_folder_class->append_online != NULL, FALSE);
 		success = disco_folder_class->append_online (
 			folder, message, info, appended_uid, error);
 		CAMEL_CHECK_GERROR (folder, append_online, success, error);
 		return success;
 
 	case CAMEL_DISCO_STORE_OFFLINE:
+		g_return_val_if_fail (disco_folder_class->append_offline != NULL, FALSE);
 		success = disco_folder_class->append_offline (
 			folder, message, info, appended_uid, error);
 		CAMEL_CHECK_GERROR (folder, append_offline, success, error);
 		return success;
 
 	case CAMEL_DISCO_STORE_RESYNCING:
+		g_return_val_if_fail (disco_folder_class->append_resyncing != NULL, FALSE);
 		success = disco_folder_class->append_resyncing (
 			folder, message, info, appended_uid, error);
 		CAMEL_CHECK_GERROR (folder, append_resyncing, success, error);
@@ -341,6 +351,7 @@ disco_transfer_messages_to (CamelFolder *source,
 
 	switch (camel_disco_store_status (CAMEL_DISCO_STORE (parent_store))) {
 	case CAMEL_DISCO_STORE_ONLINE:
+		g_return_val_if_fail (disco_folder_class->transfer_online != NULL, FALSE);
 		success = disco_folder_class->transfer_online (
 			source, uids, dest, transferred_uids,
 			delete_originals, error);
@@ -348,6 +359,7 @@ disco_transfer_messages_to (CamelFolder *source,
 		return success;
 
 	case CAMEL_DISCO_STORE_OFFLINE:
+		g_return_val_if_fail (disco_folder_class->transfer_offline != NULL, FALSE);
 		success = disco_folder_class->transfer_offline (
 			source, uids, dest, transferred_uids,
 			delete_originals, error);
@@ -355,6 +367,7 @@ disco_transfer_messages_to (CamelFolder *source,
 		return success;
 
 	case CAMEL_DISCO_STORE_RESYNCING:
+		g_return_val_if_fail (disco_folder_class->transfer_resyncing != NULL, FALSE);
 		success = disco_folder_class->transfer_resyncing (
 			source, uids, dest, transferred_uids,
 			delete_originals, error);
diff --git a/camel/providers/nntp/camel-nntp-folder.c b/camel/providers/nntp/camel-nntp-folder.c
index 15edc20..949a7d3 100644
--- a/camel/providers/nntp/camel-nntp-folder.c
+++ b/camel/providers/nntp/camel-nntp-folder.c
@@ -562,6 +562,32 @@ nntp_folder_transfer_message (CamelFolder *source,
 	return FALSE;
 }
 
+static gboolean
+nntp_folder_expunge_uids_offline (CamelFolder *folder, GPtrArray *uids, GError **error)
+{
+	CamelFolderChangeInfo *changes;
+	gint ii;
+
+	g_return_val_if_fail (folder != NULL, FALSE);
+	g_return_val_if_fail (CAMEL_IS_NNTP_FOLDER (folder), FALSE);
+	g_return_val_if_fail (uids != NULL, FALSE);
+	g_return_val_if_fail (folder->summary != NULL, FALSE);
+
+	/* can only remove deleted messages from a local cache */
+
+	changes = camel_folder_change_info_new ();
+	for (ii = 0; ii < uids->len; ii++) {
+		camel_folder_summary_remove_uid (folder->summary, uids->pdata[ii]);
+		camel_folder_change_info_remove_uid (changes, uids->pdata[ii]);
+	}
+
+	camel_folder_summary_save_to_db (folder->summary, NULL);
+	camel_folder_changed (folder, changes);
+	camel_folder_change_info_free (changes);
+
+	return TRUE;
+}
+
 static void
 camel_nntp_folder_class_init (CamelNNTPFolderClass *class)
 {
@@ -595,6 +621,9 @@ camel_nntp_folder_class_init (CamelNNTPFolderClass *class)
 	disco_folder_class->transfer_resyncing = nntp_folder_transfer_message;
 	disco_folder_class->transfer_offline = nntp_folder_transfer_message;
 	disco_folder_class->refresh_info_online = nntp_folder_refresh_info_online;
+	disco_folder_class->expunge_uids_online = nntp_folder_expunge_uids_offline;
+	disco_folder_class->expunge_uids_offline = nntp_folder_expunge_uids_offline;
+	disco_folder_class->expunge_uids_resyncing = nntp_folder_expunge_uids_offline;
 }
 
 static void
diff --git a/configure.ac b/configure.ac
index dd8acf5..88b6811 100644
--- a/configure.ac
+++ b/configure.ac
@@ -614,7 +614,9 @@ dnl check if pkg-config files exist (which are only shipped by distributions, no
 	dnl ******************
 		AC_MSG_CHECKING([for Mozilla nspr4 includes])
 			CPPFLAGS_save="$CPPFLAGS"
-			CPPFLAGS="$CPPFLAGS -I$with_nspr_includes"
+			if test -n "$with_nspr_includes"; then
+				CPPFLAGS="$CPPFLAGS -I$with_nspr_includes"
+			fi
 
 			AC_CHECK_HEADERS(nspr.h prio.h,
 			[moz_nspr_includes="yes"],[moz_nspr_includes="no"])
